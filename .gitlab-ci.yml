stages: 
#  - lint
#  - test
 - deploy

# lint: 
#   stage: lint
#   tags: 
#     - ecg-runner-server
#   script: 
#     - npm install 
#     - npx eslint ./ 

# test:
#   stage: test
#   tags: 
#     - ecg-runner-server
#   script:
#     - npm install
#     - npm run test-runner

deploy: 
  stage: deploy
  tags: 
    - ecg-runner-server
  only: 
    # only deploy to server only pushes to master branch
    - master
  before_script:
    # checks if ssh-agent is already installed and if not, then install it
    - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )' 
    # starts ssh-agent
    - eval $(ssh-agent -s)
    # adds ssh private key stored in variable SSH_PRIAVTE_KEY to agent store
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # creates .ssh directory and assign correct permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # checks public key on remotes server using IP address stored in SERVER_IPADDRESS variable and add it to known hosts. 
    # it is protecting from men-in-the-middle attack and is necessary to work, otherwise the job will fail.
    - ssh-keyscan $SERVER_IPADDRESS >> ~/.ssh/known_hosts
    # assign correct permissions
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $SSH_USER@$SERVER_IPADDRESS 
       "rm -rf ecg-authentication 
       && git clone $CI_REPOSITORY_URL 
       && echo $SERVER_PASSWORD | sudo -S docker stop ecg-api 
       && echo $SERVER_PASSWORD | sudo -S docker rm ecg-api 
       && echo $SERVER_PASSWORD | sudo -S docker rmi ecg-api-image 
       && cd ecg-authentication 
       && echo $SERVER_PASSWORD | sudo -S docker build -t ecg-api-image .
       && echo $SERVER_PASSWORD | sudo -S docker run -d --name=ecg-api -p 10002:8080 -e NODE_ENV=production -e JWT_SECRET=$JWT_SECRET ecg-api-image
       && rm -rf ecg-authentication"